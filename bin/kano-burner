#!/usr/bin/env python

# kano-burner
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
#
# This is the python executable which launches Kano Burner.
#
# Firstly, it detects the OS it is running on - Mac OSX, Linux, or Windows
# and then it imports the appropriate modules. It is the only place we detect the OS.
#
# We use two classes to distinguish between front-end and back-end.
#
# BurnerGUI class extends the UI class to override the methods which are called
#    on the appropriate events (e.g. start button click). This gives the flexibility
#    of reusing the UI class and the abstraction of how the UI class works.
#
# BurnerBackendThread class starts the main processes of downloading, burning and
#    runs them in the background. It also needs to report issues and progress to the UI
#    and this is done through custom Qt signals.
#
# This separation gives us a high-level overview of the
# major processes and steps across all three platforms


import os
import sys
import time
import platform

# append to Python's system path the path up one level
# this allows the executable to import normally from the bin/ directory
if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.insert(1, dir_path)

from PyQt4 import QtGui, QtCore
from src.common.ui import UI
from src.common.widgets import DisclaimerDialog
from src.common.download import download_kano_os
from src.common.utils import delete_dir, debugger
from src.common.errors import NO_DISKS_ERROR, REMOVE_TEMP_ERROR
from src.common.paths import temp_path


# Detect OS platform and import appropriate modules
if platform.system() == 'Darwin':
    debugger('Mac OS detected')
    from src.osx.burn import start_burn_process
    from src.osx.disk import get_disks_list, prepare_disk, eject_disk
    from src.osx.dependency import check_dependencies, request_admin_privileges, stop_child_processes

elif platform.system() == 'Linux':
    debugger('Linux OS detected')
    from src.linux.burn import start_burn_process
    from src.linux.disk import get_disks_list, prepare_disk, eject_disk
    from src.linux.dependency import check_dependencies, request_admin_privileges, stop_child_processes

elif platform.system() == 'Windows':
    debugger('Windows OS detected')
    from src.windows.burn import start_burn_process
    from src.windows.disk import get_disks_list, prepare_disk, eject_disk
    from src.windows.dependency import check_dependencies, request_admin_privileges, stop_child_processes


class BurnerGUI(UI):
    '''
    This class extends the UI class common on all three platforms.

    Here we simply override methods which get called by the UI on specific events.

    We define the behaviour of the application in these methods while maintaining
    front-end and back-end separation.
    '''

    # @Override
    # This method is called when the application is launched
    def onStart(self):
        debugger('Checking for dependencies..')

        # dependency checking is done in a separate thread to avoid app freezing
        # we connect a termination Qt signal with a UI method to advance the process
        dependencyThread = BurnerDependencyThread()
        dependencyThread.notifyFinish.connect(self.onDependencyThreadFinish)

        dependencyThread.start()
        time.sleep(1)  # very odd fix - Qt thread is killed without it

    # This method is called when the dependecyThread finishes
    def onDependencyThreadFinish(self, error):
        if error:
            self.showError(error)
        else:
            self.showScreen(self.diskScreen)

    # @Override
    # This method is called when the ComboBox is clicked
    # and just before the dropdown menu pops up
    def onComboBoxClick(self):
        # empty the combobox and enable the BURN! button
        # an item will be selected automatically
        self.disksComboBox.clear()
        self.startButton.setEnabled(True)

        # get the list of disks and show the error screen if there are none
        debugger('Scanning drives..')
        self.disks = get_disks_list()
        if not self.disks:
            self.showError(NO_DISKS_ERROR)

        # add the disks to the dropdown menu
        for disk in self.disks:
            self.disksComboBox.addItem('{0}, {1:.2f} GB'.format(disk['name'], disk['size']))

    # @Override
    # This method is called when the BURN! button is clicked
    def onStartClick(self):
        # launch disclaimer dialog - the accepted() method returns
        # when the user clicks one of the buttons in the dialog
        disclaimer = DisclaimerDialog(self)
        if not disclaimer.accepted():
            debugger('Disclaimer was canceled, refreshing')
            return self.onRetryClick()

        debugger('Disclaimer was accepted, starting process')

        # the button is disabled until the user selects a disk - we can safely proceed
        # grab the disk id e.g. osx: /dev/disk1 and switch screen to progressScreen
        selected_disk = self.disks[self.disksComboBox.currentIndex()]['id']
        self.showScreen(self.progressScreen)

        # thread to download and burn the image
        backendThread = BurnerBackendThread(selected_disk)

        # connecting Qt signals to methods on the UI
        # such that the back-end can report its progress
        backendThread.notifyProgress.connect(self.setProgress)
        backendThread.notifyStage.connect(self.setStatusTitle)
        backendThread.notifyDescription.connect(self.setStatusDescription)
        backendThread.notifyFinish.connect(self.onBackendThreadFinish)

        # start the thread and wait for it to finish
        backendThread.start()
        time.sleep(1)  # very odd fix - Qt thread is killed without it

    # This method is called when the backendThread finishes
    def onBackendThreadFinish(self, error):
        if error:
            self.showError(error)
        else:
            self.showScreen(self.finishScreen)

    # @Override
    # This method is called when the TRY AGAIN button is clicked
    def onRetryClick(self):
        self.disksComboBox.restore()
        self.progressBar.reset()
        self.startButton.setEnabled(False)
        self.showScreen(self.dependencyScreen)
        self.onStart()

    # @Override
    # This method is called when the FINISH! button is clicked
    def onFinishClick(self):
        self.close()

    # @Override
    # This method is called when the application is closing
    def onFinish(self, event):
        debugger('Attempting to stop child processes..')
        stop_child_processes()

        debugger('Removing temp files')
        successful = delete_dir(temp_path)

        if not successful:
            self.showError(REMOVE_TEMP_ERROR, retry=False)
            event.ignore()  # stop the app from closing


class BurnerDependencyThread(QtCore.QThread):
    '''
    This thread separates dependency checking from the UI loop.

    It will simply run the check_dependencies() method and notify the UI
    of its completion result via the notifyFinish signal.
    '''

    # QT signals must be defined here and not in init
    notifyFinish = QtCore.pyqtSignal(dict)

    def __init__(self, parent=None):
        super(BurnerDependencyThread, self).__init__(parent)

    def showFinish(self, error):
        # this signal notifies whether we finishes sucessfully or with an error
        self.notifyFinish.emit(error)

    def run(self):
        error = check_dependencies()

        if error:
            self.showFinish(error)
        else:
            self.notifyFinish.emit(dict())


class BurnerBackendThread(QtCore.QThread):
    '''
    The back-end thread separates background processes from
    the UI's event handling loop.

    It communicates with the UI thread though Qt signals which carry a
    payload and are connected to signal handlers, i.e. methods. When we
    emit a signal we are effectively sending some data to the UI which
    in turn is then responsible for displaying the data e.g. burn speed.

    From a top level, the back-end does four things: downloads the OS,
    prepares the disk for burning, burns the OS, and finally ejects
    the disk for safe removal. These processes will use the signals to
    report progress to the UI and an erroneous or successful completion.
    '''

    # QT signals must be defined here and not in init
    notifyProgress = QtCore.pyqtSignal(int)
    notifyStage = QtCore.pyqtSignal(str)
    notifyDescription = QtCore.pyqtSignal(str)
    notifyFinish = QtCore.pyqtSignal(dict)

    def __init__(self, disk, parent=None):
        super(BurnerBackendThread, self).__init__(parent)
        self.selected_disk = disk

    def showStage(self, text):
        # this signal sets the Title label e.g. Downloading Kano OS..
        self.notifyStage.emit(text)

    def showDescription(self, text):
        # this signal sets the Description label e.g. eta 3 minutes..
        self.notifyDescription.emit(text)

    def showProgress(self, progress, text):
        # this signal sets both the progressbar percentage and the Description label
        self.notifyProgress.emit(progress)
        self.notifyDescription.emit(text)

    def showFinish(self, error):
        # this signal notifies whether we finishes sucessfully or with an error
        self.notifyFinish.emit(error)

    def run(self):
        # Step 1: download the latest Kano OS image
        # the process returns a dict with the info about the latest OS release
        # e.g. file name, md5, size..
        debugger('Downloading Kano OS..')
        self.showStage('Downloading Kano OS..')
        os_info, error = download_kano_os(self.showProgress)
        if error:
            self.showFinish(error)
            debugger('Removing temp files')
            delete_dir(temp_path)
            return

        # Step 2: preparing the disk (unmounting, formatting, etc)
        # this process differs slightly depending on the platform running it
        debugger('Preparing {} for burning..'.format(self.selected_disk))
        self.showStage('Preparing disk for burning..')
        prepare_disk(self.selected_disk, self.showDescription)

        # Step 3: burn the OS image onto the selected disk
        debugger('Burning image to SD card on ' + self.selected_disk)
        self.showStage('Burning Kano OS..')
        error = start_burn_process(os_info, self.selected_disk, self.showProgress)
        if error:
            self.showFinish(error)
            return

        # Step 4: eject selected disk so the user can unplug safely
        # on OSX, the disk will automatically be mounted back after dd finishes
        debugger('Ejecting disk..')
        self.showStage('Waiting for things to settle..')
        time.sleep(5)  # wait for dd to mount the disk back
        eject_disk(self.selected_disk)

        # Finally, show success messsage, notify UI of finish, and return an empty error
        self.showStage("Kano OS has successfully been burned. Let's go!")
        self.notifyFinish.emit(dict())


def main():
    # start the UI event handling loop
    app = QtGui.QApplication(sys.argv)
    burnerUI = BurnerGUI()
    sys.exit(app.exec_())


if __name__ == '__main__':
    # before we start the application, make sure it is run with admin privileges
    request_admin_privileges()
    main()
